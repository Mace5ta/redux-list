{"version":3,"sources":["store/todo/actionTypes.ts","store/todo/actions.ts","components/ButtonsTodo/ButtonsTodo.tsx","components/Todo/Todo.tsx","components/TodoList/TodoList.tsx","components/Counter/Counter.tsx","components/app.tsx","store/todo/todoReducer.ts","store/index.ts","index.tsx"],"names":["ADD_TODO","DEL_TODO","SEND_TODO","GET_TODO","sendTodo","type","ButtonsTodo","item","dispatch","useDispatch","selectedList","useSelector","state","isDisabledButton","find","selTodo","id","onClick","payload","console","log","disabled","Todo","props","index","className","title","TodoList","todoList","useEffect","fetch","then","response","json","todos","getTodo","length","map","Counter","cnt","App","initialState","store","createStore","action","filter","ReactDOM","render","document","getElementById"],"mappings":"gKAAaA,EAAW,WACXC,EAAW,WACXC,EAAY,YACZC,EAAW,WCsCXC,EAAW,CAACC,KAAMH,G,OCHhBI,EAhCK,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAEZC,EAAWC,cAEXC,EAAeC,aAAkC,SAAAC,GAAK,OAAIA,EAAMF,gBAYhEG,EAAmB,WACrB,QAAIH,EAAaI,MAAK,SAACC,GAAD,OAAaA,EAAQC,KAAOT,EAAKS,OAO3D,OACI,qCACI,wBAAQC,QApBM,WAClBT,EDYG,CACHH,KAAML,EACNkB,QCdiBX,IACjBY,QAAQC,IAAI,YAkBwBC,SAAUR,IAA1C,8DACA,wBAAQI,QAhBM,WAClBT,EDgBG,CACHH,KAAMJ,EACNiB,QClBiBX,IACjBY,QAAQC,IAAI,aAcwBC,UAAWR,IAA3C,4DCFGS,EAlBF,SAACC,GACV,IAAMhB,EAAOgB,EAAMhB,KACLgB,EAAMC,MAGpB,OACI,sBAAKC,UAAW,OAAhB,UACI,8BAAMlB,EAAKmB,QACX,8BACI,cAAC,EAAD,CAAanB,KAAMA,UCkCpBoB,EAjDE,WACb,IAAMnB,EAAWC,cAEXC,EAAeC,aAAkC,SAAAC,GAAK,OAAIA,EAAMF,gBAEhEkB,EAAWjB,aAAkC,SAAAC,GAAK,OACpDO,QAAQC,IAAIR,GACRA,EAAMgB,YAUdC,qBAAU,WACNC,MAAM,uDACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACEf,QAAQC,IAAI,uCAAUc,GACtB1B,EHcG,SAAC0B,GACpB,MAAO,CACH7B,KAAMF,EACNe,QAASgB,GGjBYC,CAAQD,SAG9B,IAQH,OAAwB,IAApBN,EAASQ,OACF,0HAIP,qCACI,8BACKR,EAASS,KAAI,SAAC9B,EAAMiB,GAAP,OACV,cAAC,EAAD,CAAMjB,KAAMA,EAAoBiB,MAAOA,GAAhBjB,EAAKS,SAGpC,wBAAQC,QAAS,kBAfrBE,QAAQC,IAAI,iBAAkBV,QAC9BF,EAASJ,IAcL,wEClCGkC,EAbC,WACZ,IAAMZ,EAAQf,aAA4B,SAACC,GAAD,OAAWA,EAAMc,SAErDa,EAAM5B,aAA6B,SAAAC,GAAK,OAAIA,EAAMF,aAAa0B,UAErE,OACI,gCACI,8BAAMV,IACN,8BAAMa,QCmDHC,EAnBH,WACR,OACI,gCACI,iCACI,cAAC,EAAD,MAQJ,+BACI,cAAC,EAAD,U,sBCpDVC,EAAe,CACjBb,SAAU,GACVlB,aAAc,GACdgB,MAAO,2KCFEgB,EAAQC,aDKM,WAA4C,IAA3C/B,EAA0C,uDAAlC6B,EAAcG,EAAoB,uCAClE,OAAQA,EAAOvC,MACX,KAAKL,EACD,OAAO,2BAAIY,GAAX,IAAkBF,aAAa,GAAD,mBAAME,EAAMF,cAAZ,CAA0BkC,EAAO1B,YACnE,KAAKjB,EACD,OAAO,2BAAIW,GAAX,IAAkBF,aAAcE,EAAMF,aAAamC,QAAO,SAAA9B,GAAO,OAAKA,EAAsBC,KAAQ4B,EAAO1B,QAAsBF,QACrI,KAAKd,EACD,OAAO,2BAAIU,GAAX,IAAkBF,aAAc,KACpC,KAAKP,EACD,OAAO,2BAAIS,GAAX,IAAkBgB,SAAUgB,EAAO1B,UACvC,QACI,OAAON,MEfnBkC,IAASC,OACL,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACI,cAAC,EAAD,MAEJM,SAASC,eAAe,W","file":"static/js/main.e5d115a1.chunk.js","sourcesContent":["export const ADD_TODO = 'ADD_TODO';\r\nexport const DEL_TODO = 'DEL_TODO';\r\nexport const SEND_TODO = 'SEND_TODO';\r\nexport const GET_TODO = 'GET_TODO'\r\n","import {ADD_TODO, DEL_TODO, GET_TODO, SEND_TODO} from './actionTypes';\r\nimport {TTodoList} from '../index';\r\n\r\n\r\nexport type TAction = {\r\n    type: string,\r\n    payload?: TTodoList\r\n};\r\n\r\n// Actions\r\n\r\n// export const addTodo = {\r\n//     type: ADD_TODO,\r\n//     payload: [{\r\n//         userId: 1,\r\n//         id: 1,\r\n//         title: \"delectus aut autem\",\r\n//         completed: false,\r\n//     }]\r\n// };\r\n\r\nexport const addTodo = (todo: TTodoList) => {\r\n\r\n    // const newArr = [...selectedList, todo]\r\n\r\n    return {\r\n        type: ADD_TODO,\r\n        payload: todo\r\n    }\r\n\r\n};\r\n\r\nexport const delTodo = (todo: TTodoList) => {\r\n\r\n    return {\r\n        type: DEL_TODO,\r\n        payload: todo\r\n    }\r\n\r\n};\r\n\r\nexport const sendTodo = {type: SEND_TODO};\r\n\r\nexport const getTodo = (todos:TTodoList[]) => {\r\n    return {\r\n        type: GET_TODO,\r\n        payload: todos\r\n\r\n    }\r\n};\r\n\r\n\r\n","import React from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {addTodo, delTodo} from '../../store/todo/actions';\r\nimport {TState, TTodoList} from '../../store';\r\n\r\n// @ts-ignore\r\nconst ButtonsTodo = ({item}) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const selectedList = useSelector<TState, TTodoList[]>((state => state.selectedList));\r\n\r\n    const handleAddTodo = () => {\r\n        dispatch(addTodo(item));\r\n        console.log('Adddddd')\r\n    };\r\n\r\n    const handleDelTodo = () => {\r\n        dispatch(delTodo(item));\r\n        console.log('Dellllll')\r\n    };\r\n\r\n    const isDisabledButton = () => {\r\n        if (selectedList.find((selTodo) => selTodo.id === item.id)) {\r\n            return true\r\n        }\r\n        return false\r\n    } //\r\n\r\n\r\n    return (\r\n        <>\r\n            <button onClick={handleAddTodo} disabled={isDisabledButton()}>Добавить</button>\r\n            <button onClick={handleDelTodo} disabled={!isDisabledButton()}>Удалить</button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ButtonsTodo\r\n","import React from \"react\";\r\nimport ButtonsTodo from '../ButtonsTodo/ButtonsTodo';\r\n\r\ntype TProps = {\r\n    item: {\r\n        userId: number;\r\n        id: number;\r\n        title: string;\r\n        completed: boolean;\r\n        // key: number\r\n    };\r\n    index: number\r\n};\r\nconst Todo = (props: TProps) => {\r\n    const item = props.item;\r\n    const index = props.index;\r\n\r\n\r\n    return (\r\n        <div className={\"Todo\"}>\r\n            <div>{item.title}</div>\r\n            <div>\r\n                <ButtonsTodo item={item}/>\r\n                {/*<ButtonsTodo index={index} id={item.id}/>*/}\r\n                {/*<button>Добавить</button>*/}\r\n                {/*<button disabled={true}>Удалить</button>*/}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Todo;\r\n","import React, {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {TState, TTodoList} from '../../store';\r\nimport Todo from '../Todo/Todo';\r\nimport {getTodo, sendTodo} from '../../store/todo/actions';\r\n\r\n\r\nconst TodoList = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const selectedList = useSelector<TState, TTodoList[]>((state => state.selectedList));\r\n\r\n    const todoList = useSelector<TState, TTodoList[]>((state => (\r\n        console.log(state),\r\n            state.todoList\r\n    )));\r\n\r\n\r\n    // const todoList = useSelector<TState, TTodoList[]>((state => (\r\n    //     console.log(state),\r\n    //         state.todoList\r\n    // )));\r\n\r\n    // @ts-ignore\r\n    useEffect(() => {\r\n        fetch('https://jsonplaceholder.typicode.com/todos?_limit=9')\r\n            .then(response => response.json())\r\n            .then(todos => {\r\n                    console.log('ТыДыСы', todos);\r\n                    dispatch(getTodo(todos))\r\n                }\r\n            );\r\n    }, [])\r\n\r\n\r\n    const handleSendTodo = () => {\r\n        console.log('Senddddddddddd', selectedList)\r\n        dispatch(sendTodo);\r\n    }\r\n\r\n    if (todoList.length === 0) {\r\n        return <h1>Загрузка данных...</h1>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                {todoList.map((item, index) => (\r\n                    <Todo item={item} key={item.id} index={index}/>\r\n                ))}\r\n            </div>\r\n            <button onClick={() => handleSendTodo()}>Отправить</button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TodoList;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport {TState} from '../../store';\r\n\r\nconst Counter = () => {\r\n    const title = useSelector<TState, string>((state) => state.title);\r\n\r\n    const cnt = useSelector<TState, number>((state => state.selectedList.length));\r\n\r\n    return (\r\n        <div>\r\n            <div>{title}</div>\r\n            <div>{cnt}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Counter;\r\n","import React from \"react\";\r\n\r\n\r\nimport TodoList from './TodoList/TodoList';\r\nimport Counter from './Counter/Counter';\r\n\r\n// const todoList = [\r\n//     {\r\n//         userId: 1,\r\n//         id: 1,\r\n//         title: \"delectus aut autem\",\r\n//         completed: false,\r\n//     },\r\n//     {\r\n//         userId: 1,\r\n//         id: 2,\r\n//         title: \"quis ut nam facilis et officia qui\",\r\n//         completed: false,\r\n//     },\r\n//     {\r\n//         userId: 1,\r\n//         id: 3,\r\n//         title: \"fugiat veniam minus\",\r\n//         completed: false,\r\n//     },\r\n//     {\r\n//         userId: 1,\r\n//         id: 4,\r\n//         title: \"et porro tempora\",\r\n//         completed: true,\r\n//     },\r\n//     {\r\n//         userId: 1,\r\n//         id: 5,\r\n//         title: \"laboriosam mollitia et enim quasi adipisci quia provident illum\",\r\n//         completed: false,\r\n//     },\r\n//     {\r\n//         userId: 1,\r\n//         id: 6,\r\n//         title: \"qui ullam ratione quibusdam voluptatem quia omnis\",\r\n//         completed: false,\r\n//     },\r\n// ];\r\nconst App = () => {\r\n    return (\r\n        <div>\r\n            <header >\r\n                <Counter />\r\n            </header>\r\n            {/*<main>*/}\r\n            {/*    {todoList.map((item) => (*/}\r\n            {/*        <Todo item={item} key={item.id} />*/}\r\n            {/*    ))}*/}\r\n            {/*    <button>Отправить</button>*/}\r\n            {/*</main>*/}\r\n            <main>\r\n                <TodoList/>\r\n            </main>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// initialStateCounter\r\nimport {TAction} from '../todo/actions';\r\nimport {ADD_TODO, DEL_TODO, GET_TODO, SEND_TODO} from './actionTypes';\r\nimport {TTodoList} from '../index';\r\n\r\nconst initialState = {\r\n    todoList: [],\r\n    selectedList: [],\r\n    title: 'Число элементов в новом массиве:',\r\n};\r\n\r\nexport const todoReducer = (state = initialState, action: TAction) => {\r\n    switch (action.type) {\r\n        case ADD_TODO:\r\n            return {...state, selectedList: [...state.selectedList, action.payload]};\r\n        case DEL_TODO:\r\n            return {...state, selectedList: state.selectedList.filter(selTodo => (selTodo as TTodoList).id !== (action.payload as TTodoList).id)};\r\n        case SEND_TODO:\r\n            return {...state, selectedList: []};\r\n        case GET_TODO:\r\n            return {...state, todoList: action.payload};\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import {createStore} from 'redux';\r\nimport {todoReducer} from './todo/todoReducer';\r\n// import { reducer } from \"./counter/reducer\";\r\n\r\n// export const store = createStore(reducer);\r\n// @ts-ignore\r\nexport const store = createStore(todoReducer);\r\n\r\nexport type TState = ReturnType<typeof store.getState>;\r\nexport type TTodoList = {\r\n    userId: number,\r\n    id: number,\r\n    title: string,\r\n    completed: boolean,\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./components/app\";\nimport { store } from \"./store\";\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById(\"root\")\n);\n\n"],"sourceRoot":""}